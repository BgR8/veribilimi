#x'in ikinci elemanına NA atarız
x[2] <- NA
x
#x'in elemanlarından na var mI?
is.na(x)
#x'in elemanlarında NA olmayanları göster
x[!is.na(x)]
na.omit(x)
##########   video-11  ###################get spesific items from vector using which operator
x <-c(1:11)
min(x)
max(x)
median(x)
#4 ve 6 elemanlar hariç
x[-c(5,6)]
#6'dan küçük elemanları göster
which(x < 6)
##########   video-11  ################### Converting variable type tı another
int.vec <- c(1:6)
class(int.vec)
int.vec
as.numeric(int.vec)
as.numeric(int.vec) -> int.vec
class(int.vec)
as.numeric(int.vec)
class(int.vec)
as.character(int.vec)
##########   video-13  ################### Lists are collection of vectors
vec1 <- c("yes", 5)
vec1
vec2 <- c(TRUE, "f")
vec2
vec3 <- c(FALSE, 4)
vec3
vec4 <- c(TRUE, 11)
vec4
lists1 <- list(vec1, vec2,vec3, vec4)
lists1
lists1[1]
length(lists1)
lists1[[1]][2]
str(lists1)
class(lists1)
unlist(lists1)
##########   video-14  ################### Set Operations
a <- c(1:6)
b <- c(5:10)
1 %in% a
10 %in% a
#a'nın tüm elemanlarının b'nin içinde olup olmadığı
a %in% b
#aynısını is.elemet de yapar
is.element(a,b)
#her sample(a) dediğimizde a nın farklı kombinasyonları seçilir
sample(a)
sample(a)
#set.seed() fonksiyonu kullandıktan sonra her seferinde aynı patern gelir
set.seed(10)
sample(a)
##########   video-15  ################### Set Operations
##########   video-16  ################### special conditionals and common mistakes
a <- 2
b <- 10
c <- c(1:4)
any(c > a)
if(a>b){
print("A B'den büyüktür")
}else{
print("A B'den büyük değildir.")
}
ifelse(a>b, print("A B'den büyük"), print("A B'den büyük değil"))
##########   video-17  ################### For loops
for(i in seq(2,20,2)){
if(i%%2 == 0){
print(i)
}
if(i>10){
break
}
}
##########   video-18  ################### Data Frames
a <- c(1,2,3,4,NA)
b <- c(5,6,7,NA,8)
c <- c(9,10,NA,11,12)
d <- c(13,NA,14,15,16)
e <- c(17,18,19,20,21)
class(a,b,c,d,e)
class(a)
#Vektörleri tek bir dataframe de birleştirelim
y <- data.frame(a,b,c,d,e)
y
stack(y) -> y1
y1
cy <- cbind(y,y,y,y,y)
cy
ry <- rbind(y,y,y,y,y)
ry
##########   video-19  ################### How to transpose Data Frames
fix(ry)
#Transpose of ry'a ryt diyelim
ryt <- t(ry)
ryt
class(ryt)
class(ryt)
head(ryt)
head(ry)
head(ry, 20)
tal(ry)
tail(ry)
ry[which(ry$a > 1), ]
ry[which(ry$a > 1), ]
ry[which(ry$a > 1 & ry[,2] < 7), ]
attach(ry)
a
install.packages("xlsx")
library(xlsx)
read.xlsx("H:/tez_db/tez_db_splitted/WashingtonTown_2.xlsx", header = TRUE)
help("xlsx")
file <- system.file("file", "H:/tez_db/tez_db_splitted/WashingtonTown_2.xlsx", package = "xlsx")
res <- read.xlsx(file, 1)  # read the second sheet
file <- system.file("tests", "H:/tez_db/tez_db_splitted/WashingtonTown_2.xlsx", package = "xlsx")
res <- read.xlsx(file, 1)  # read the second sheet
res <- read.xlsx("H:/tez_db/tez_db_splitted/WashingtonTown_2.xlsx",1)
install.packages("RODBC")
library(RODBC)
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "Yuvacik_2012")
Deneme4Table <- sqlQuery(baglantim, "SELECT TOP 10000 * FROM Deneme4")
View(Deneme4Table)
Deneme4Table <- sqlQuery(baglantim, "SELECT RECORDID, PROVIDER,UNIT_ENG, SEASON, FROM Deneme4")
Deneme4Table <- sqlQuery(baglantim, "SELECT RECORDID, PROVIDER,UNIT_ENG, SEASON FROM Deneme4")
View(Deneme4Table)
Deneme4Table <- sqlQuery(baglantim, "SELECT REPORT FROM Deneme4")
View(Deneme4Table)
rm(Deneme4Table)
library(RODBC)
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "WindowsPassword")
Deneme4Table <- sqlQuery(baglantim, "SELECT REPORT FROM Deneme4")
rm(Deneme4Table)
baglantim <- odbcConnect("SampleDeneme4")
Deneme4Table <- sqlQuery(baglantim, "SELECT REPORT FROM Deneme4")
View(Deneme4Table)
class(Deneme4Table)
str(Deneme4Table)
rm(Deneme4Table)
library(RODBC)
baglantim <- RODBC::odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "Yuvacik_2012")
data = RODBC::odbcQuery(baglantim, "SELECT * FROM Sample.dbo.MetinDB")
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "Yuvacik_2012")
data = odbcQuery(baglantim, "SELECT * FROM Sample.dbo.MetinDB")
data = sqlQuery(baglantim, "SELECT * FROM Sample.dbo.MetinDB")
View(data)
states <- rownames(USArrests)
substr(x=states, start = 1, stop = 4)
states2 <- abbreviate(states)
names(states2) = NULL
states2
states3 <- abbreviate(states, minlength = 5)
states3
a = "test me"
b = 8 + 9
is.character(a)
is.character(b)
b = as.character(b)
b
View(data)
for (i in 1:length(data) {
split(data[i]," ")
print(data[i])
}
length(data)
data = as.character(data)
length(data)
for (i in 1:length(data) {
split(data[i]," ")
print(data[i])
}
print(data[1])
print(data[2])
print(data)
library(RODBC)
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "WindowsPassword")
Metin <- sqlQuery(baglantim, "SELECT * FROM Sample.dbo.MetinDB")
View(Metin)
str(Metin)
Metin_Metin
str(Metin_Metin)
Rstring = c("The R Foundation",
"for Statistical Computing",
"R is FREE software",
"R is a collaborative project")
gsub("R", "RR", Rstring)
cities = c("San Francisco", "Barcelona", "Naples", "Paris")
str_replace_all(cities, pattern = "[aeiou]", ";")
library(stringr)
str_replace_all(cities, pattern = "[aeiou]", ";")
sentence = c("R is a collaborative project with many contributors")
str_split(sentence, " ")
tels = c("510-548-2238", "707-231-2440", "650-752-1300")
str_split(tels, "-")
cities = c("San Francisco", "Barcelona", "Naples", "Paris",c("San Francisco", "Barcelona", "Naples", "Paris"))
str_replace_all(cities, pattern = "[aeiou]", ";")
tels = c("510-548-2238", "707-231-2440", "650-752-1300",c("510-548-2238", "707-231-2440", "650-752-1300"))
str_split(tels, "-")
flavors = c("chocolate", "vanilla", "cinnamon", "mint", "lemon")
str_split(flavors, "[aeiou]")
url = "http://old.biomedcentral.com/journals/biomedcentraljournallist.txt"
biomed = read.table(url, header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(biomed, vec.len = 1)
head(biomed$Journal.name, 5)
head(biomed$Journal.name)
titles10 = biomed$Journal.name[1:10]
titles10
titles10 = str_replace_all(titles10, pattern = "[[:punct:]]", "")
titles10
titles10 = str_replace_all(titles10, pattern = "\\s+", " ")
titles10
all_titles = str_replace_all(biomed$Journal.name, pattern = "[[:punct:]]","")
all_titles = str_replace_all(all_titles, pattern = "\\s+"," ")
all_titles_list = str_split(all_titles, pattern = "\\s+"," ")
all_titles_list = str_split(all_titles, pattern = " ")
all_titles_list[1:5]
words_per_title = sapply(all_titles_list, length)
table(words_per_title)
100 * round(table(words_per_title)/length(words_per_title),4)
summary(words_per_title)
all_titles[which(words_per_title == 9)]
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "WindowsPassword")
Metin <- sqlQuery(baglantim, "SELECT * FROM TezDW.dbo.Deneme1")
library(RODBC)
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "WindowsPassword")
Metin <- sqlQuery(baglantim, "SELECT * FROM TezDW.dbo.Deneme1")
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "WindowsPassword")
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "Yuvacik_2012")
baglantim <- odbcConnect("SampleDeneme4", uid = "erkansirin78@hotmail.com", pwd = "Yuvacik_2012")
baglantim <- odbcConnect("TexDW", uid = "toshiba", pwd = "Yuvacik_2012")
Metin <- sqlQuery(baglantim, "SELECT * FROM TezDW.dbo.Deneme1")
View(Metin)
str(Metin)
Metin_Karakter <- as.character(Metin)
sqlQuery(baglantim, "UPDATE TezDW.dbo.Deneme1 SET REPORT ='' WHERE REPORT ='|'")
sqlQuery(baglantim, "ALTER TABLE TezDW.dbo.Deneme1 DROP REPORT2")
sqlQuery(baglantim, "ALTER TABLE TezDW.dbo.Deneme1 DROP COLUMN REPORT2")
str(Metin_Karakter)
write.csv(help)
help("write.csv")
write.csv(Metin_Karakter, "H:/tez_as_Character.txt", sep = "|", "na")
write.csv(Metin_Karakter, "H:/tez_as_Character.txt", sep = "|", "na")
write.csv(Metin_Karakter, "H:/tez_as_Character.txt", sep = "|")
write.csv(Metin_Karakter, "H:/tez_as_Character.txt",append = TRUE,  sep = "|")
rapor <- as.character(Metin$REPORT)
View(rapor)
View(rapor)
head(rapor)
split(rapor, " ")
length(rapor)
for(i in length(rapor)){
rapor2 <-rapor2 + split(rapor[i], " ")
}
rapor2 <- " "
for(i in length(rapor)){
rapor2 <-rapor2 + split(rapor[i], " ")
}
for(i in length(rapor)){
rapor2 <- c(rapor2, split(rapor[i], " "))
}
head(rapor2)
rapor2 <- split(rapo[9968], " ")
rapor2 <- split(rapor[9968], " ")
rapor2
rapor2 <- split(rapor[[9968]], " ")
rapor2
rm(Metin, Metin_Karakter, rapor, rapor2)
getwd()
View(data)
View(cy)
View(biomed)
View(y1)
View(y)
y_pred = predict(lin_reg, data.frame(Level = 6.5))
# Data Preprocessing Template
# Setting working directory
setwd("C:\\Users\\toshiba\\Desktop\\Machine Learning A-Z\\Part 2 - Regression\\Section 6 - Polynomial Regression")
# Importing the dataset
dataset = read.csv('PozisyonSeviyeMaas.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Maas ~ ., data = dataset)
summary(lin_reg)
# Fitting Polinom Model
dataset$Seviye2 = dataset$Seviye^2
dataset$Seviye3 = dataset$Seviye^3
poly_reg = lm(formula = Maas ~ ., data = dataset)
summary(poly_reg)
# Lineer model grafiği
library(ggplot2)
ggplot()+
geom_point(aes(x = dataset$Seviye, y = dataset$Maas),
colour = 'red')+
geom_line(aes(x = dataset$Seviye, y = predict(lin_reg, newdata = dataset)),
colour = 'blue')+
ggtitle('Lineer Regresyon')+
xlab('Seviye')+
ylab('Maas')
# Polinom model grafiği
ggplot()+
geom_point(aes(x = dataset$Seviye, y = dataset$Maas),
colour = 'red')+
geom_line(aes(x = dataset$Seviye, y = predict(poly_reg, newdata = dataset)),
colour = 'blue')+
ggtitle('Polinom Regresyon')+
xlab('Seviye')+
ylab('Maas')
y_pred = predict(lin_reg, data.frame(Level = 6.5))
y_pred = predict(lin_reg, data.frame(Level = 6.5))
# Polynomial Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
# Visualising the Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
# Visualising the Polynomial Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
# Polynomial Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
# Visualising the Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
# Visualising the Polynomial Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
View(dataset)
# Polynomial Regression
setwd('C:\\Users\\toshiba\\Desktop\\Machine Learning A-Z\\Part 2 - Regression\\Section 6 - Polynomial Regression')
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
View(dataset)
setwd('C:\\Users\\toshiba\\Desktop\\Machine Learning A-Z\\Part 2 - Regression\\Section 6 - Polynomial Regression')
dataset = read.csv('Position_Salaries.csv')
# Polynomial Regression
setwd('C:\\Users\\toshiba\\Desktop\\Machine Learning A-Z\\Part 2 - Regression\\Section 6 - Polynomial Regression')
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
View(dataset)
lin_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
# Visualising the Polynomial Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
predict(lin_reg, data.frame(Level = 6.5))
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
