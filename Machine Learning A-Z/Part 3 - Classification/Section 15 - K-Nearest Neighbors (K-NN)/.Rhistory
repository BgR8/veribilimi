g <- rep(5,10)
g
rep(1:4, 5)
rep(1:4, each=5)
a <- runif(10)
a
a <- a* 10
a
a <- round(a)
a
x <- c(1,2,3,4,5)
x
x[2] <- NA
x
is.na(x)
x[!is.na(x)]
attr(,"na.action")
na.omit(x)
na.omit(x)
x <-(c1:11)
x <-c(1:11)
min(x)
max(x)
median(x)
x[-c(5,6)]
which(x < 6)
int.vec <- c(1:6)
class(int.vec)
int.vec
as.numeric(int.vec)
as.numeric(int.vec) -> int.vec
class(int.vec)
as.numeric(int.vec)
class(int.vec)
as.character(int.vec)
vec1 <- c("yes", 5)
ve1
vec1
vec2 <- c(TRUE, "f")
vec2
vec3 <- c(FALSE, 4)
vec3
vec4 <- c(TRUE, 11)
vec4
lists1 <- list(vec1, vec2,vec3, vec4)
lists1
lists1[1]
length(lists1)
lists1[[1]][2]
str(lists1)
class(lists1)
a <- c(1:16)
b <- c(5:10)
1 %in% a
10 %in% a
a <- c(1:6)
1 %in% a
b <- c(5:10)
10 %in% a
a %in% b
is.element(a,b)
sample(a)
sample(a)
set.seed(10)
sample(a)
set.seed(10)
sample(a)
a <- 2
b <- 10
c <- c(1:4)
any(c > a)
if(a>b){
print("A B'den büyüktür")
}else{
print("A B'den büyük değildir.")
}
ifelse(a>b, print("A B'den büyük"), print("A B'den büyük değil"))
for(i in c(1:10)){•
print(i)
}
for(i in seq(1,20,2)){
print(i)
}
for(i in seq(1,20,2)){
if(i%%2 == 0){
print(i)
}
if(i>10){
break
}
}
for(i in seq(1,20,2)){
if(i%%2 == 0){
print(i)
}
if(i>10){
break
}
}
for(i in seq(2,20,2)){
if(i%%2 == 0){
print(i)
}
if(i>10){
break
}
}
a <- c(1,2,3,4,NA)
b <- c(5,6,7,NA,8)
c <- c(9,10,NA,11,12)
d <- c(13,NA,14,15,16)
e <- c(17,18,19,20,21)
class(a,b,c,d,e)
class(a)
y <- as.data.frame(a,b,c,d,e)
y <- data.frame(a,b,c,d,e)
y
stack(y) -> y1
y1
cy <- cbind(y,y,y,y,y)
cy
ry <- rbind(y,y,y,y,y)
ry
fix(ry)
ryt <- t(ry)
ryt
class(ryt)
View(washington)
class(ryt)
##########   video-7  ###################
a <- 1:10
a
seq(1,16,2) #1'den 16'ya 2'şer arttır
# 1  3  5  7  9 11 13 15
d <- seq(20,1,-0.1)
d
##########   video-8  ###################
g <- rep(5,10)
g
rep(1:4, 5) # 1,2,3,4'ü beş defa tekrarla
rep(1:4, each=5) # 1'den 4'e kadar her bir rakamı 5'er kez tekrarla.
##########   video-9  ################### Random Numbers
a <- runif(10)
a
a <- a* 10
a
a <- round(a)
a
##########   video-10  ###################
x <- c(1,2,3,4,5)
x
#x'in ikinci elemanına NA atarız
x[2] <- NA
x
#x'in elemanlarından na var mI?
is.na(x)
#x'in elemanlarında NA olmayanları göster
x[!is.na(x)]
na.omit(x)
##########   video-11  ###################get spesific items from vector using which operator
x <-c(1:11)
min(x)
max(x)
median(x)
#4 ve 6 elemanlar hariç
x[-c(5,6)]
#6'dan küçük elemanları göster
which(x < 6)
##########   video-11  ################### Converting variable type tı another
int.vec <- c(1:6)
class(int.vec)
int.vec
as.numeric(int.vec)
as.numeric(int.vec) -> int.vec
class(int.vec)
as.numeric(int.vec)
class(int.vec)
as.character(int.vec)
##########   video-13  ################### Lists are collection of vectors
vec1 <- c("yes", 5)
vec1
vec2 <- c(TRUE, "f")
vec2
vec3 <- c(FALSE, 4)
vec3
vec4 <- c(TRUE, 11)
vec4
lists1 <- list(vec1, vec2,vec3, vec4)
lists1
lists1[1]
length(lists1)
lists1[[1]][2]
str(lists1)
class(lists1)
unlist(lists1)
##########   video-14  ################### Set Operations
a <- c(1:6)
b <- c(5:10)
1 %in% a
10 %in% a
#a'nın tüm elemanlarının b'nin içinde olup olmadığı
a %in% b
#aynısını is.elemet de yapar
is.element(a,b)
#her sample(a) dediğimizde a nın farklı kombinasyonları seçilir
sample(a)
sample(a)
#set.seed() fonksiyonu kullandıktan sonra her seferinde aynı patern gelir
set.seed(10)
sample(a)
##########   video-15  ################### Set Operations
##########   video-16  ################### special conditionals and common mistakes
a <- 2
b <- 10
c <- c(1:4)
any(c > a)
if(a>b){
print("A B'den büyüktür")
}else{
print("A B'den büyük değildir.")
}
ifelse(a>b, print("A B'den büyük"), print("A B'den büyük değil"))
##########   video-17  ################### For loops
for(i in seq(2,20,2)){
if(i%%2 == 0){
print(i)
}
if(i>10){
break
}
}
##########   video-18  ################### Data Frames
a <- c(1,2,3,4,NA)
b <- c(5,6,7,NA,8)
c <- c(9,10,NA,11,12)
d <- c(13,NA,14,15,16)
e <- c(17,18,19,20,21)
class(a,b,c,d,e)
class(a)
#Vektörleri tek bir dataframe de birleştirelim
y <- data.frame(a,b,c,d,e)
y
stack(y) -> y1
y1
cy <- cbind(y,y,y,y,y)
cy
ry <- rbind(y,y,y,y,y)
ry
##########   video-19  ################### How to transpose Data Frames
fix(ry)
#Transpose of ry'a ryt diyelim
ryt <- t(ry)
ryt
class(ryt)
class(ryt)
head(ryt)
head(ry)
head(ry, 20)
tal(ry)
tail(ry)
ry[which(ry$a > 1), ]
ry[which(ry$a > 1), ]
ry[which(ry$a > 1 & ry[,2] < 7), ]
attach(ry)
a
install.packages("xlsx")
library(xlsx)
read.xlsx("H:/tez_db/tez_db_splitted/WashingtonTown_2.xlsx", header = TRUE)
help("xlsx")
file <- system.file("file", "H:/tez_db/tez_db_splitted/WashingtonTown_2.xlsx", package = "xlsx")
res <- read.xlsx(file, 1)  # read the second sheet
file <- system.file("tests", "H:/tez_db/tez_db_splitted/WashingtonTown_2.xlsx", package = "xlsx")
res <- read.xlsx(file, 1)  # read the second sheet
res <- read.xlsx("H:/tez_db/tez_db_splitted/WashingtonTown_2.xlsx",1)
install.packages("RODBC")
library(RODBC)
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "Yuvacik_2012")
Deneme4Table <- sqlQuery(baglantim, "SELECT TOP 10000 * FROM Deneme4")
View(Deneme4Table)
Deneme4Table <- sqlQuery(baglantim, "SELECT RECORDID, PROVIDER,UNIT_ENG, SEASON, FROM Deneme4")
Deneme4Table <- sqlQuery(baglantim, "SELECT RECORDID, PROVIDER,UNIT_ENG, SEASON FROM Deneme4")
View(Deneme4Table)
Deneme4Table <- sqlQuery(baglantim, "SELECT REPORT FROM Deneme4")
View(Deneme4Table)
rm(Deneme4Table)
library(RODBC)
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "WindowsPassword")
Deneme4Table <- sqlQuery(baglantim, "SELECT REPORT FROM Deneme4")
rm(Deneme4Table)
baglantim <- odbcConnect("SampleDeneme4")
Deneme4Table <- sqlQuery(baglantim, "SELECT REPORT FROM Deneme4")
View(Deneme4Table)
class(Deneme4Table)
str(Deneme4Table)
rm(Deneme4Table)
library(RODBC)
baglantim <- RODBC::odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "Yuvacik_2012")
data = RODBC::odbcQuery(baglantim, "SELECT * FROM Sample.dbo.MetinDB")
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "Yuvacik_2012")
data = odbcQuery(baglantim, "SELECT * FROM Sample.dbo.MetinDB")
data = sqlQuery(baglantim, "SELECT * FROM Sample.dbo.MetinDB")
View(data)
states <- rownames(USArrests)
substr(x=states, start = 1, stop = 4)
states2 <- abbreviate(states)
names(states2) = NULL
states2
states3 <- abbreviate(states, minlength = 5)
states3
a = "test me"
b = 8 + 9
is.character(a)
is.character(b)
b = as.character(b)
b
View(data)
for (i in 1:length(data) {
split(data[i]," ")
print(data[i])
}
length(data)
data = as.character(data)
length(data)
for (i in 1:length(data) {
split(data[i]," ")
print(data[i])
}
print(data[1])
print(data[2])
print(data)
library(RODBC)
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "WindowsPassword")
Metin <- sqlQuery(baglantim, "SELECT * FROM Sample.dbo.MetinDB")
View(Metin)
str(Metin)
Metin_Metin
str(Metin_Metin)
Rstring = c("The R Foundation",
"for Statistical Computing",
"R is FREE software",
"R is a collaborative project")
gsub("R", "RR", Rstring)
cities = c("San Francisco", "Barcelona", "Naples", "Paris")
str_replace_all(cities, pattern = "[aeiou]", ";")
library(stringr)
str_replace_all(cities, pattern = "[aeiou]", ";")
sentence = c("R is a collaborative project with many contributors")
str_split(sentence, " ")
tels = c("510-548-2238", "707-231-2440", "650-752-1300")
str_split(tels, "-")
cities = c("San Francisco", "Barcelona", "Naples", "Paris",c("San Francisco", "Barcelona", "Naples", "Paris"))
str_replace_all(cities, pattern = "[aeiou]", ";")
tels = c("510-548-2238", "707-231-2440", "650-752-1300",c("510-548-2238", "707-231-2440", "650-752-1300"))
str_split(tels, "-")
flavors = c("chocolate", "vanilla", "cinnamon", "mint", "lemon")
str_split(flavors, "[aeiou]")
url = "http://old.biomedcentral.com/journals/biomedcentraljournallist.txt"
biomed = read.table(url, header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(biomed, vec.len = 1)
head(biomed$Journal.name, 5)
head(biomed$Journal.name)
titles10 = biomed$Journal.name[1:10]
titles10
titles10 = str_replace_all(titles10, pattern = "[[:punct:]]", "")
titles10
titles10 = str_replace_all(titles10, pattern = "\\s+", " ")
titles10
all_titles = str_replace_all(biomed$Journal.name, pattern = "[[:punct:]]","")
all_titles = str_replace_all(all_titles, pattern = "\\s+"," ")
all_titles_list = str_split(all_titles, pattern = "\\s+"," ")
all_titles_list = str_split(all_titles, pattern = " ")
all_titles_list[1:5]
words_per_title = sapply(all_titles_list, length)
table(words_per_title)
100 * round(table(words_per_title)/length(words_per_title),4)
summary(words_per_title)
all_titles[which(words_per_title == 9)]
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "WindowsPassword")
Metin <- sqlQuery(baglantim, "SELECT * FROM TezDW.dbo.Deneme1")
library(RODBC)
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "WindowsPassword")
Metin <- sqlQuery(baglantim, "SELECT * FROM TezDW.dbo.Deneme1")
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "WindowsPassword")
baglantim <- odbcConnect("SampleDeneme4", uid = "toshiba", pwd = "Yuvacik_2012")
baglantim <- odbcConnect("SampleDeneme4", uid = "erkansirin78@hotmail.com", pwd = "Yuvacik_2012")
baglantim <- odbcConnect("TexDW", uid = "toshiba", pwd = "Yuvacik_2012")
Metin <- sqlQuery(baglantim, "SELECT * FROM TezDW.dbo.Deneme1")
View(Metin)
str(Metin)
Metin_Karakter <- as.character(Metin)
sqlQuery(baglantim, "UPDATE TezDW.dbo.Deneme1 SET REPORT ='' WHERE REPORT ='|'")
sqlQuery(baglantim, "ALTER TABLE TezDW.dbo.Deneme1 DROP REPORT2")
sqlQuery(baglantim, "ALTER TABLE TezDW.dbo.Deneme1 DROP COLUMN REPORT2")
str(Metin_Karakter)
write.csv(help)
help("write.csv")
write.csv(Metin_Karakter, "H:/tez_as_Character.txt", sep = "|", "na")
write.csv(Metin_Karakter, "H:/tez_as_Character.txt", sep = "|", "na")
write.csv(Metin_Karakter, "H:/tez_as_Character.txt", sep = "|")
write.csv(Metin_Karakter, "H:/tez_as_Character.txt",append = TRUE,  sep = "|")
rapor <- as.character(Metin$REPORT)
View(rapor)
View(rapor)
head(rapor)
split(rapor, " ")
length(rapor)
for(i in length(rapor)){
rapor2 <-rapor2 + split(rapor[i], " ")
}
rapor2 <- " "
for(i in length(rapor)){
rapor2 <-rapor2 + split(rapor[i], " ")
}
for(i in length(rapor)){
rapor2 <- c(rapor2, split(rapor[i], " "))
}
head(rapor2)
rapor2 <- split(rapo[9968], " ")
rapor2 <- split(rapor[9968], " ")
rapor2
rapor2 <- split(rapor[[9968]], " ")
rapor2
rm(Metin, Metin_Karakter, rapor, rapor2)
getwd()
View(data)
View(cy)
View(biomed)
View(y1)
View(y)
# set working directory
setwd('C:\\Users\\toshiba\\Desktop\\Machine Learning A-Z\\Part 3 - Classification\\Section 15 - K-Nearest Neighbors (K-NN)')
# Importing the dataset
dataset = read.csv('SosyalMedyaReklamKampanyası.csv', encoding = 'UTF-8')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$SatinAldiMi = factor(dataset$SatinAldiMi, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$SatinAldiMi, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(class)
library(class)
y_pred = knn(train = training_set[,-3],
test = test_set[,-3],
cl = training_set[,3],
k = 5)
y_pred
# KNN
# set working directory
setwd('C:\\Users\\toshiba\\Desktop\\Machine Learning A-Z\\Part 3 - Classification\\Section 15 - K-Nearest Neighbors (K-NN)')
# Importing the dataset
dataset = read.csv('SosyalMedyaReklamKampanyası.csv', encoding = 'UTF-8')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$SatinAldiMi = factor(dataset$SatinAldiMi, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$SatinAldiMi, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Eğitim Seti ile Modeli Eğitme ve Test Sonuçlarını Tahmin Etme
library(class)
y_pred = knn(train = training_set[,-3],
test = test_set[,-3],
cl = training_set[,3],
k = 5)
y_pred
cm = table(test_set[, 3], y_pred)
cm
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Yas', 'TahminiMaas')
y_grid = knn(train = training_set[,-3],
test = grid_set,
cl = training_set[,3],
k = 5)
plot(set[, -3],
main = 'K En Yakın Komşu (Eğitim set)',
xlab = 'Yaş', ylab = 'Tahmini Maaş',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Yas', 'TahminiMaas')
y_grid = knn(train = training_set[,-3],
test = grid_set,
cl = training_set[,3],
k = 5)
plot(set[, -3], main = 'K En Yakın Komşu (Test seti)',
xlab = 'Yaş', ylab = 'Tahmini Maaş',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
